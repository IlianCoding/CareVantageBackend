name: CareVantageBackend CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  CAREVANTAGE_BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  CAREVANTAGE_DATABASE_IMAGE_NAME: ${{ github.repository }}/carevantagedatabase
  KEYCLOAK_DATABASE_IMAGE_NAME: ${{ github.repository }}/keycloakdatabase
  KEYCLOAK_IMAGE_NAME: ${{ github.repository }}/keycloak

jobs:
  check-commit:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    outputs:
      should_test: ${{ steps.check-message.outputs.should_test }}
    steps:
      - name: Check commit message
        id: check-message
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^pipe:.* ]]; then
            echo "should_test=true" >> $GITHUB_OUTPUT
          else
            echo "should_test=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: [check-commit]
    if: github.ref == 'refs/heads/main' || needs.check-commit.outputs.should_test == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
  
  build-and-test:
    runs-on: ubuntu-latest
    needs: [check-commit]
    if: github.ref == 'refs/heads/main' || needs.check-commit.outputs.should_test == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.0'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.3
        with:
          reports: '**/coverage.cobertura.xml'
          targetdir: 'coveragereport'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport

  build-backend-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for backend container
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CAREVANTAGE_BACKEND_IMAGE_NAME }}
      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

  build-carevantage-database:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Carevantage Database
        id: meta-carevantage-database
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CAREVANTAGE_DATABASE_IMAGE_NAME }}
      - name: Build and Push Carevantage Database Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta-carevantage-database.outputs.tags }}
          labels: ${{ steps.meta-carevantage-database.outputs.labels }}
          
  build-keycloak-database:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Keycloak Database
        id: meta-keycloak-database
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.KEYCLOAK_DATABASE_IMAGE_NAME }}
      - name: Build and Push Keycloak Database Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta-keycloak-database.outputs.tags }}
          labels: ${{ steps.meta-keycloak-database.outputs.labels }}

  build-keycloak:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Keycloak
        id: meta-keycloak
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.KEYCLOAK_IMAGE_NAME }}
      - name: Build and Push Keycloak Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta-keycloak.outputs.tags }}
          labels: ${{ steps.meta-keycloak.outputs.labels }}

  publish-and-deploy:
    needs:
      - build-backend-image
      - build-carevantage-database
      - build-keycloak
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to kubernetes
        run: |
          kubectl apply -f k8s/
          kubectl rollout restart deployment backend-deployment

      - name: Verify Kubernetes Rollout
        run: |
          kubectl rollout status deployment/backend-deployment --timeout=120s