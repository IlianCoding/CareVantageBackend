// <auto-generated />
using System;
using CVB.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CVB.DAL.Migrations.CareVantage
{
    [DbContext(typeof(CareVantageDbContext))]
    [Migration("20250120202339_InitCareVantage")]
    partial class InitCareVantage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CVB.BL.Domain.AppointmentPck.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.AppointmentPck.AppointmentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.BillingInvoice.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.BillingInvoice.InvoiceDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.PaymentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RefundedPaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("CVB.BL.Domain.ReviewPck.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.ReviewPck.ReviewDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfDislikes")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.ToTable("ReviewDetails");
                });

            modelBuilder.Entity("CVB.BL.Domain.ServicePck.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.ServicePck.ServiceFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("ServiceFeatures");
                });

            modelBuilder.Entity("CVB.BL.Domain.ServicePck.ServicePricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("BillingType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("ServicePricings");
                });

            modelBuilder.Entity("CVB.BL.Domain.SubscriptionPck.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.SubscriptionPck.SubscriptionPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("SubscriptionPeriods");
                });

            modelBuilder.Entity("CVB.BL.Domain.SubscriptionPck.SubscriptionPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BillingFrequency")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("SubscriptionPricings");
                });

            modelBuilder.Entity("CVB.BL.Domain.UsagePck.UsageMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MetricType")
                        .HasColumnType("text");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsageRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsageRecordId")
                        .IsUnique();

                    b.ToTable("UsageMetrics");
                });

            modelBuilder.Entity("CVB.BL.Domain.UsagePck.UsageRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UsageRecords", (string)null);
                });

            modelBuilder.Entity("CVB.BL.Domain.AppointmentPck.AppointmentDetails", b =>
                {
                    b.HasOne("CVB.BL.Domain.AppointmentPck.Appointment", "Appointment")
                        .WithOne("Details")
                        .HasForeignKey("CVB.BL.Domain.AppointmentPck.AppointmentDetails", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.BillingInvoice.Invoice", b =>
                {
                    b.HasOne("CVB.BL.Domain.PaymentPck.Payment", "Payment")
                        .WithOne("Invoice")
                        .HasForeignKey("CVB.BL.Domain.PaymentPck.BillingInvoice.Invoice", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.BillingInvoice.InvoiceDetails", b =>
                {
                    b.HasOne("CVB.BL.Domain.PaymentPck.BillingInvoice.Invoice", "Invoice")
                        .WithOne("Details")
                        .HasForeignKey("CVB.BL.Domain.PaymentPck.BillingInvoice.InvoiceDetails", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.PaymentDetails", b =>
                {
                    b.HasOne("CVB.BL.Domain.PaymentPck.Payment", "Payment")
                        .WithOne("Details")
                        .HasForeignKey("CVB.BL.Domain.PaymentPck.PaymentDetails", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVB.BL.Domain.PaymentPck.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.PaymentTransaction", b =>
                {
                    b.HasOne("CVB.BL.Domain.PaymentPck.Payment", "Payment")
                        .WithOne("Transaction")
                        .HasForeignKey("CVB.BL.Domain.PaymentPck.PaymentTransaction", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CVB.BL.Domain.ReviewPck.Review", b =>
                {
                    b.HasOne("CVB.BL.Domain.ServicePck.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CVB.BL.Domain.ReviewPck.ReviewDetails", b =>
                {
                    b.HasOne("CVB.BL.Domain.ReviewPck.Review", "Review")
                        .WithOne("ReviewDetails")
                        .HasForeignKey("CVB.BL.Domain.ReviewPck.ReviewDetails", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("CVB.BL.Domain.ServicePck.ServiceFeature", b =>
                {
                    b.HasOne("CVB.BL.Domain.ServicePck.Service", "Service")
                        .WithOne("Features")
                        .HasForeignKey("CVB.BL.Domain.ServicePck.ServiceFeature", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CVB.BL.Domain.ServicePck.ServicePricing", b =>
                {
                    b.HasOne("CVB.BL.Domain.ServicePck.Service", "Service")
                        .WithOne("Pricing")
                        .HasForeignKey("CVB.BL.Domain.ServicePck.ServicePricing", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CVB.BL.Domain.SubscriptionPck.SubscriptionPeriod", b =>
                {
                    b.HasOne("CVB.BL.Domain.SubscriptionPck.Subscription", "Subscription")
                        .WithOne("Period")
                        .HasForeignKey("CVB.BL.Domain.SubscriptionPck.SubscriptionPeriod", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("CVB.BL.Domain.SubscriptionPck.SubscriptionPricing", b =>
                {
                    b.HasOne("CVB.BL.Domain.SubscriptionPck.Subscription", "Subscription")
                        .WithOne("Pricing")
                        .HasForeignKey("CVB.BL.Domain.SubscriptionPck.SubscriptionPricing", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("CVB.BL.Domain.UsagePck.UsageMetrics", b =>
                {
                    b.HasOne("CVB.BL.Domain.UsagePck.UsageRecord", "UsageRecord")
                        .WithOne("Metrics")
                        .HasForeignKey("CVB.BL.Domain.UsagePck.UsageMetrics", "UsageRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsageRecord");
                });

            modelBuilder.Entity("CVB.BL.Domain.AppointmentPck.Appointment", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.BillingInvoice.Invoice", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("CVB.BL.Domain.PaymentPck.Payment", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("CVB.BL.Domain.ReviewPck.Review", b =>
                {
                    b.Navigation("ReviewDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("CVB.BL.Domain.ServicePck.Service", b =>
                {
                    b.Navigation("Features")
                        .IsRequired();

                    b.Navigation("Pricing")
                        .IsRequired();

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CVB.BL.Domain.SubscriptionPck.Subscription", b =>
                {
                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("Pricing")
                        .IsRequired();
                });

            modelBuilder.Entity("CVB.BL.Domain.UsagePck.UsageRecord", b =>
                {
                    b.Navigation("Metrics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
